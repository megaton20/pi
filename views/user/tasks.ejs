<style>

/* Task Grid */
.task-grid {
  display: grid;
  gap: 1.5rem;
  grid-template-columns: 1fr;
}

.task-card {
  display: flex;
  align-items: center;
  padding: 1rem;
  border-radius: 10px;
  background: #2a3348;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
  transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
}

.task-card:hover {
  transform: translateY(-5px);
  background-color: #394660;
}

.task-icon {
  font-size: 1.8rem;
  color: #6a5acd;
  margin-right: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(106, 90, 205, 0.1);
  border-radius: 50%;
  width: 50px;
  height: 50px;
}

.task-details h5 {
  margin: 0 0 0.3rem 0;
  font-size: 1.1rem;
  font-weight: bold;
  color: #fff;
}

.task-details p {
  margin: 0;
  font-size: 0.85rem;
  color: #aaa;
}

.badge {
  font-size: 0.75rem;
  padding: 0.3rem 0.6rem;
  border-radius: 4px;
  font-weight: bold;
  margin-top: 0.3rem;
}

.badge.completed {
  background-color: #3dd598;
  color: white;
}

.badge.pending {
  background-color: #f25c54;
  color: white;
}

.task-action {
  font-size: 0.9rem;
  font-weight: bold;
  background: #6a5acd;
  color: #fff;
  border: none;
  border-radius: 6px;
  padding: 0.6rem 1rem;
  cursor: pointer;
  margin-left: auto;
  transition: background-color 0.2s ease-in-out;
}

.task-action:disabled {
  background: #555;
  cursor: not-allowed;
}

.task-action:hover:not(:disabled) {
  background-color: #584dc5;
}


/* ads Grid */
.ads-grid {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 10px;
  min-width: 350px;
}

/* Stat Cards */
.ads-card {
  margin-right: 20px;
  background: #1a1f36;
  padding: 12px;
  padding-top: 30px;
  border-radius: 8px;
  text-align: center;
  transition: all 0.3s ease-in-out;
  color: #fff;
  font-size: 12px;
  box-shadow: 0px 0px 12px rgba(138, 43, 226, 0.7);
}

</style>



<!-- End of Topbar -->



  <div class="compact-container">

    <%- include ('../partials/messages') %>

    <!-- Sticky Tabs -->
    <div class="sticky-tabs">
      <ul class="nav nav-tabs" id="taskTabs" role="tablist">
        <li class="nav-item">
          <button class="nav-link active" id="daily-tab" data-bs-toggle="tab" data-bs-target="#cinema" type="button">Cinema</button>
        </li>

        <li class="nav-item">
          <button class="nav-link" id="weekly-tab" data-bs-toggle="tab" data-bs-target="#audio" type="button">Audio</button>
        </li>
        <li class="nav-item">
          <button class="nav-link" id="monthly-tab" data-bs-toggle="tab" data-bs-target="#ads" type="button"> General ADs </button>
        </li>
      </ul>
    </div>

    <!-- Task Content -->
      <!-- Task Content -->
      <div class="tab-content scrollable-content" id="taskTabsContent">
        <!-- Cinema Tasks -->
        <br>
        <div class="tab-pane fade show active" id="cinema">
          <% let cinemaTasks = tasks.filter(task => task.task_type === 'watch_video'); %>
          <% if (cinemaTasks.length > 0) { %>
            <% cinemaTasks.forEach(task => { %>
              <div class="task-card mb-2">
                <div class="task-icon">
                  <i class="bi bi-film"></i>
                </div>
                <div class="task-details">
                  <h5>WATCH VIDEO</h5>
                  <p><%= task.source %> Task - Earn $<%= task.earnings %></p>
                  <span class="badge <%= task.user_status === 'completed' ? 'completed' : 'pending' %>">
                    <%= task.user_status === 'completed' ? 'Completed' : 'Pending' %>
                  </span>
                </div>
                <% if (task.user_status === 'not_started') { %>
                  <button class="task-action start-task" data-task-id="<%= task.id %>">Start Task</button>
                  <% } else { %>
                    <button class="task-action complete-task " data-task-id="<%= task.id %>">claim</button>
                  <!-- <button class="task-action" data-task-id="<%= task.id %>">Done</button> -->
                <% } %>
              </div>
            <% }) %>
          <% } else { %>
            <p class="text-center text-light">No Cinema tasks available.</p>
          <% } %>
        </div>
  
        <!-- Audio Tasks -->
        <div class="tab-pane fade" id="audio">
          <% let audioTasks = tasks.filter(task => task.task_type === 'listen_music'); %>
          <% if (audioTasks.length > 0) { %>
            <% audioTasks.forEach(task => { %>
              <div class="task-card mb-2">
                <div class="task-icon">
                  <i class="bi bi-music-note"></i>
                </div>
                <div class="task-details">
                  <h5>LISTEN MUSIC</h5>
                  <p><%= task.source %> Task - Earn $<%= task.earnings %></p>
                  <span class="badge <%= task.user_status === 'completed' ? 'completed' : 'pending' %>">
                    <%= task.user_status === 'completed' ? 'Completed' : 'Pending' %>
                  </span>
                </div>
                <% if (task.user_status === 'not_started') { %>
                  <button class="task-action start-task" data-task-id="<%= task.id %>">Start Task</button>
                <% } else { %>
                  <button class="task-action" disabled>Done</button>
                <% } %>
              </div>
            <% }) %>
          <% } else { %>
            <p class="text-center text-light">No Audio tasks available.</p>
          <% } %>
        </div>
  
        <!-- Referral Tasks -->
        <div class="tab-pane fade" id="ads">
                
          <br>
          <br>
          <br>
          <a href="#" class=" ads-grid mt-5">
                <div class="ads-card" id="watchAdBtn">
                  <h3>âš¡ </h3>
                  Watch Ad & Earn
                </div>
            </a>
        </div>
      </div>
  
  </div>

      

      <%- include ('./partials/bottomnav') %>
      

<script>
    document.querySelectorAll('.start-task').forEach(button => {
    button.addEventListener('click', async function () {
        const taskId = this.getAttribute('data-task-id');

        const response = await fetch('/user/tasks/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                userId: '<%= user.id %>', 
                taskId 
            })
        });

        
        const data = await response.json();;
        if (data.success) {
          window.open(data.url, '_blank'); // Open YouTube link
          location.reload();
        } else {
            alert('Error: ' + data.message);
        }
    });
});

</script>
      

  <script>
       document.querySelectorAll(".complete-task").forEach(button => {
       button.addEventListener("click", async function () {
        const taskId = this.getAttribute("data-task-id");

        try {
            const response = await fetch("/user/tasks/complete", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ 
                    userId: '<%= user.id %>', 
                    taskId 
                })
            });

            const data = await response.json();
            if (data.success) {
                alert("Success: " + data.message);
                location.reload();
            } else {
                alert("Error: " + data.message);
                window.open(data.url, '_blank'); // Open YouTube link
            }
        } catch (error) {
            console.error("Task completion failed", error);
        }
    });
      });
  
      </script>
      
      <script src="https://www.is.com/ironsource-sdk.js"></script>

     

<script>
    document.getElementById("watchAdBtn").addEventListener("click", function() {
        ironSource.showRewardedAd({
            appKey: "YOUR_IRONSOURCE_APP_KEY",
            userId: 365605,
            onAdStarted: function() {
                fetch("/start-ad", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ userId: "USER_ID_HERE" })
                });
            },
            onAdCompleted: function(adData) {
                fetch("/ad-completed", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        userId: "USER_ID_HERE",
                        adId: "GENERATED_AD_ID_HERE",
                        adDuration: adData.duration
                    })
                }).then(response => response.json())
                  .then(data => alert(data.message));
            }
        });
    });
</script>